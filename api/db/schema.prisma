// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id            Int     @id @default(autoincrement())
  email         String  @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?

  name          String?
  avatar        String?

  role          UserType  @default(USER)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")

  invites       Invite[]
  events        Event[]
  santa         Pairing[] @relation(name: "pairings_santa")
  person        Pairing[] @relation(name: "pairings_person")
  thankYousFrom ThankYou[] @relation(name: "thankyous_from_user")
  thankYousTo   ThankYou[] @relation(name: "thankyous_to_user")

  @@map("users")
}

model Invite {
  id            Int       @id @default(autoincrement())
  eventId       Int       @map("event_id")
  event         Event     @relation(fields: [eventId], references: [id])
  userId        Int       @map("user_id")
  user          User      @relation(fields: [userId], references: [id])
  status        InviteStatus
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("invites")
}

model Event {
  id            Int       @id @default(autoincrement())
  name          String
  date          DateTime
  userId        Int       @map("user_id")
  owner         User      @relation(fields: [userId], references: [id])
  sendReminder  Boolean   @map("send_reminder")
  invites       Invite[]
  wishLists     WishList[]
  pairings      Pairing[]
  thankyous     ThankYou[]

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("events")
}

model WishList {
  id            Int       @id @default(autoincrement())
  name          String
  url           String
  userId        Int       @map("user_id")
  order         Int
  event         Event     @relation(fields: [eventId], references: [id])
  eventId       Int       @map("event_id")
  siteImage     String    @map("site_image")
  siteTitle     String    @map("site_title")
  siteDescription     String    @map("site_description")

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("wishlists")
}

model Pairing {
  id            Int       @id @default(autoincrement())
  url           String
  personId      Int       @map("person_id")
  person        User      @relation(fields: [personId], references: [id], name: "pairings_person")
  santaId       Int       @map("santa_id")
  santa         User      @relation(fields: [santaId], references: [id], name: "pairings_santa")
  order         Int
  event         Event     @relation(fields: [eventId], references: [id])
  eventId       Int       @map("event_id")
  siteImage     String    @map("site_image")

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("pairings")
}

model ThankYou {
  id            Int       @id @default(autoincrement())
  message       String
  fromUserId    Int       @map("from_user_id")
  fromUser      User      @relation(fields: [fromUserId], references: [id], name: "thankyous_from_user")
  toUserId      Int       @map("to_user_id")
  toUser        User      @relation(fields: [toUserId], references: [id], name: "thankyous_to_user")
  event         Event     @relation(fields: [eventId], references: [id])
  eventId       Int       @map("event_id")

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("thank_yous")
}

enum UserType {
    ADMIN
    USER
}

enum InviteStatus {
  INVITED
  DECLINED
  ACCEPTED
}
